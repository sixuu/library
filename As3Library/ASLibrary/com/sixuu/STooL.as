package com.sixuu{	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;	import flash.system.LoaderContext;	public class STooL	{		public function STooL()		{			// constructor code		}		static public function GetDir(ob:DisplayObject)		{			var dir:String = ob.root.loaderInfo.url;			dir = dir.substr(0,dir.lastIndexOf("/",dir.length - 1)) + "/";			return dir;		}		static public function getTimeStr():String		{			var d:Date=new Date();			var y = d.fullYear.toString();			var m = d.month + 1;			var t = d.date;			var h = d.hours;			var mi = d.minutes;			var s = d.seconds;			var ma=int(1000+Math.random()*1000).toString();			var mStr:String = String(m);//yue			var dStr:String = String(t);//ri			var hStr:String = String(h);//xiaoshi			var miStr:String = String(mi);//fen			var sStr:String = String(s);//miao			m < 10 ? mStr = "0" + mStr:0;			t < 10 ? dStr = "0" + dStr:0;			h < 10 ? hStr = "0" + hStr:0;			mi < 10 ? miStr = "0" + miStr:0;			s < 10 ? sStr = "0" + sStr:0;			return y+mStr+dStr+hStr+miStr+sStr+ma;		}		static public function getTimeStrFromSecond(seconds:Number):String{			var h=seconds/60/60 >> 0			h>0?h=uint(h)+":":h=""			var m=uint((seconds / 60) % 60)+":"						var s=uint(seconds%60)						return h+m+s					}		static public function bytesLoad(loader:Loader,url:String,CookieName:String,cookieDir:String,onComplete:Function)		{            var context:LoaderContext=new LoaderContext()			context.allowCodeImport=true			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,loaded);			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,loadErr);			if (SCookie.getCookie(CookieName,cookieDir) && SCookie.getCookie(CookieName,cookieDir) != "")			{				loader.loadBytes(SCookie.getCookie(CookieName,cookieDir),context);				trace("loading data from local... :"+cookieDir);			}			else			{				var dataLoader:URLLoader=new URLLoader();				dataLoader.dataFormat = URLLoaderDataFormat.BINARY;				dataLoader.load(new URLRequest(url));				dataLoader.addEventListener(Event.COMPLETE,dataLoaded);				function dataLoaded(e:Event)				{					loader.loadBytes(dataLoader.data,context);					SCookie.setCookie(CookieName,cookieDir,dataLoader.data);					trace("loading data from server... :"+url);				}			}			function loaded(e:Event)			{				onComplete();			}			function loadErr(e:IOErrorEvent)			{				trace("[ loaderr: "+e.text+" At BytesLoader");			}		}		static public function checkIP(sIPAddress):Boolean		{			var flag:Boolean = true;			var exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;			var reg = sIPAddress.match(exp);			if (reg==null)			{				flag = false;			}			else			{				flag = true;			}			return flag;		}			static public function checkMail(sMailAddress):Boolean		{			var flag:Boolean = true;			var exp = /^(\w)+(\.\w+)*@(\w)+((\.\w+)+)$/;			var reg = sMailAddress.match(exp);			if (reg==null)			{				flag = false;			}			else			{				flag = true;			}			return flag;		}		static public function checkMAC(macStr:String):Boolean		{			//mac地址正则表达式 			var flag:Boolean = true;			var reg_name = /(^[a-fA-F0-9]{12}$)/;			if (! reg_name.test(macStr))			{				flag = false;			}			return flag;		}		static public function checkMobile(str:String)		{			var flag:Boolean = true;			var reg_name = /^1[3|4|5|8][0-9]\d{4,8}$/;			if (! reg_name.test(str))			{				flag = false;			}			return flag;		}	}}